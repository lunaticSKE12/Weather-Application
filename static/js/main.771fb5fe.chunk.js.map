{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["title","className","form","props","onSubmit","getWeather","type","name","placeholder","weather","city","country","temperature","humidity","description","error","API_KEY","process","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","Titles","Form","this","Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kPAWeA,EATD,WACZ,OACE,6BACE,wBAAIC,UAAU,0BAAd,kBACA,uBAAGA,UAAU,6BAAb,kDCMSC,EAVF,SAAAC,GACX,OACE,0BAAMC,SAAUD,EAAME,YACpB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDC0BSC,EA/BC,SAAAN,GAAU,IAChBO,EAA6DP,EAA7DO,KAAMC,EAAuDR,EAAvDQ,QAASC,EAA8CT,EAA9CS,YAAaC,EAAiCV,EAAjCU,SAAUC,EAAuBX,EAAvBW,YAAaC,EAAUZ,EAAVY,MAC3D,OACE,yBAAKd,UAAU,iBAEXS,GAAQC,GAAW,uBAAGV,UAAU,gBAAb,aACnB,0BAAMA,UAAU,kBAAhB,IAAmCS,EAAnC,KAA2CC,IAI3CC,GAAe,uBAAGX,UAAU,gBAAb,gBACf,0BAAMA,UAAU,kBAAhB,IAAmCW,EAAnC,MAIAC,GAAY,uBAAGZ,UAAU,gBAAb,aACZ,0BAAMA,UAAU,kBAAhB,IAAmCY,EAAnC,MAIAC,GAAe,uBAAGb,UAAU,gBAAb,eACf,0BAAMA,UAAU,kBAAhB,IAAmCa,EAAnC,MAIAC,GAAS,uBAAGd,UAAU,kBAAkBc,KCrB1CC,EAAO,UAAMC,oCAyEJC,E,4MArEbC,MAAQ,CACNP,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,iBAAaM,EACbL,WAAOK,G,EAGTf,W,uCAAa,WAAOgB,GAAP,qBAAAC,EAAA,yDACXD,EAAEE,iBACIb,EAAOW,EAAEG,OAAOC,SAASf,KAAKgB,MAC9Bf,EAAUU,EAAEG,OAAOC,SAASd,QAAQe,OACtChB,IAAQC,EAJD,iCAKcgB,MAAM,6DAAD,OACwBjB,EADxB,YACgCC,EADhC,kBACiDK,EADjD,0BALnB,cAKHY,EALG,gBAQUA,EAASC,OARnB,OAQHC,EARG,OASTC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZrB,YAAakB,EAAKI,KAAKC,KACvBzB,KAAMoB,EAAKvB,KACXI,QAASmB,EAAKM,IAAIzB,QAClBE,SAAUiB,EAAKI,KAAKrB,SACpBC,YAAagB,EAAKrB,QAAQ,GAAGK,YAC7BC,MAAO,KAhBA,wBAmBT,EAAKkB,SAAS,CACZrB,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,iBAAaM,EACbL,MAAO,4BAzBA,4C,6GA+BX,OACE,6BACE,yBAAKd,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAACoC,EAAD,OAEF,yBAAKpC,UAAU,2BACb,kBAACqC,EAAD,CAAMjC,WAAYkC,KAAKlC,aACvB,kBAACmC,EAAD,CACE5B,YAAa2B,KAAKpB,MAAMP,YACxBF,KAAM6B,KAAKpB,MAAMT,KACjBC,QAAS4B,KAAKpB,MAAMR,QACpBE,SAAU0B,KAAKpB,MAAMN,SACrBC,YAAayB,KAAKpB,MAAML,YACxBC,MAAOwB,KAAKpB,MAAMJ,kB,GA3DpB0B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACLgB,QAAQhB,MAAMA,EAAM4C,a","file":"static/js/main.771fb5fe.chunk.js","sourcesContent":["import React from 'react';\n\nconst title = () => {\n  return (\n    <div>\n      <h1 className=\"title-container__title\">Weather Finder</h1>\n      <p className=\"title-container__subtitle\">Find out temperature, conditions and more...</p>\n    </div>\n  )\n}\n\nexport default title","import React from 'react';\n\nconst form = props => {\n  return (\n    <form onSubmit={props.getWeather}>\n      <input type='text' name='city' placeholder='City...' />\n      <input type='text' name='country' placeholder='Country...' />\n      <button>Get Weather</button>\n    </form>\n  )\n}\n\nexport default form","import React from 'react'\n\nconst weather = props => {\n  const { city, country, temperature, humidity, description, error } = props\n  return (\n    <div className=\"weather__info\">\n      {\n        city && country && <p className=\"weather__key\"> Location:\n        <span className=\"weather__value\"> {city}, {country}</span>\n        </p>\n      }\n      {\n        temperature && <p className=\"weather__key\"> Temperature:\n        <span className=\"weather__value\"> {temperature}\t</span>\n        </p>\n      }\n      {\n        humidity && <p className=\"weather__key\"> Humidity:\n        <span className=\"weather__value\"> {humidity} </span>\n        </p>\n      }\n      {\n        description && <p className=\"weather__key\"> Conditions:\n        <span className=\"weather__value\"> {description} </span>\n        </p>\n      }\n      {\n        error && <p className=\"weather__error\">{error}</p>\n      }\n    </div >\n  )\n}\n\nexport default weather","import React, { Component } from 'react';\n\nimport Titles from './components/Titles'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\n\nconst API_KEY = `${process.env.REACT_APP_WEATHER_API_KEY}`\n\nclass App extends Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault()\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n    if (city && country) {\n      const api_call = await fetch(`\n      https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric\n      `)\n      const data = await api_call.json()\n      console.log(data)\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the value.\"\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}